// src/auth/auth.guard.ts
import {
  CanActivate,
  ExecutionContext,
  Injectable,
  UnauthorizedException,
  Logger,
} from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Request } from 'express';
import { JwtService } from '@nestjs/jwt';
import { User } from '../users/user.schema';
import { config } from 'dotenv';
config();

interface AuthenticatedRequest extends Request {
  user?: User;
  newToken?: string;
}

interface DecodedToken {
  userId: string;
  email: string;
  iat?: number;
  exp?: number;
}

@Injectable()
export class AuthGuard implements CanActivate {
  private readonly logger = new Logger(AuthGuard.name);

  constructor(
    private jwtService: JwtService,
    @InjectModel(User.name) private userModel: Model<User>,
  ) {}

  async canActivate(context: ExecutionContext): Promise<boolean> {
    const request = context.switchToHttp().getRequest<AuthenticatedRequest>();
    const token = request.headers['x-auth-token'] as string;
    const ip =
      request.ip || request.headers['x-forwarded-for'] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';

    this.logger.debug(`üöÄ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å IP: ${ip as string}`);
    this.logger.debug(
      `üîç –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ${JSON.stringify(request.headers)}`,
    );

    if (!token) {
      this.logger.warn('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      throw new UnauthorizedException('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
    }

    this.logger.debug(`üîë –í—Ö–æ–¥—è—â–∏–π —Ç–æ–∫–µ–Ω: ${token}`);

    try {
      const decoded = this.jwtService.verify<DecodedToken>(token);

      this.logger.debug(`üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: ${JSON.stringify(decoded)}`);

      if (!decoded.userId || !decoded.email) {
        this.logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–æ–∫–µ–Ω–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç userId –∏–ª–∏ email');
        throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω');
      }

      const user = await this.userModel.findOne({ _id: decoded.userId });
      this.logger.debug(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${JSON.stringify(user)} `);
      if (!user) {
        this.logger.warn(
          `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${decoded.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç`,
        );
        throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω');
      }

      this.logger.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`);

      request.user = user;

      return true;
    } catch (error: unknown) {
      const errMessage =
        error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      this.logger.error(
        `üõë –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${errMessage}`,
        error instanceof Error ? error.stack : '',
      );
      throw new UnauthorizedException('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  }
}

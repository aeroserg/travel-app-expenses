import { QueryClient } from "@tanstack/react-query";
import { Expense } from "../types/expense.interface";
import { Group } from "../types/group.interface";

export const API_URL = "http://localhost:4000";
export const queryClient = new QueryClient();

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π `X-Auth-Token`
 */
/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π `X-Auth-Token`
 */
async function apiFetch<T>(
  endpoint: string,
  options: RequestInit = {}
): Promise<T> {
  const token = localStorage.getItem("token"); // –•—Ä–∞–Ω–∏–º —Ç–æ–∫–µ–Ω –≤ localStorage

  const headers: HeadersInit = {
    "Content-Type": "application/json",
    ...(token ? { "X-Auth-Token": token } : {}), // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    ...options.headers, // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  };

  console.log(
    `[API] –ó–∞–ø—Ä–æ—Å: ${options.method || "GET"} ${API_URL}${endpoint}`
  );
  console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω: ${token}`);

  const response = await fetch(`${API_URL}${endpoint}`, {
    ...options,
    headers,
  });

  // –ö–ª–æ–Ω–∏—Ä—É–µ–º response, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–≤–∞–∂–¥—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å body (–¥–ª—è –ª–æ–≥–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞)
  const responseClone = response.clone();
  const responseBody = await responseClone.json().catch(() => null);

  console.log(`[API] –û—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`, responseBody);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—à–µ–ª
  if (responseBody && responseBody.token) {
    console.log(`–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${responseBody.token}`);
    localStorage.setItem("token", responseBody.token); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
  }

  if (!response.ok) {
    console.error(`[API] –û—à–∏–±–∫–∞: ${response.status}`, responseBody);

    if (response.status === 401) {
      console.warn("[API] 401 Unauthorized - —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      localStorage.removeItem("token"); // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
      window.location.href = "/auth/login"; // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    }

    throw new Error(responseBody?.message || "–û—à–∏–±–∫–∞ API");
  }

  return responseBody as T;
}


// –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–ª–æ–≥–∏–Ω–∞ –ø—Ä–∏ 401 Unauthorized
// function handleUnauthorized() {
//   localStorage.removeItem("token"); // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
//   window.location.href = "/auth/login"; // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
// }

/** ==============================
 *  üöÄ AUTH API
 *  ============================== */
export const authApi = {
  async login(email: string, password: string) {
    return apiFetch<{ token: string }>("/auth/login", {
      method: "POST",
      body: JSON.stringify({ email, password }),
    });
  },

  async getProfile() {
    return apiFetch<{ _id: string; name: string; email: string }>("/users/me");
  },

  async register(name: string, email: string, password: string) {
    return apiFetch<{ token: string }>("/auth/register", {
      method: "POST",
      body: JSON.stringify({ name, email, password }),
    });
  },

  async logout() {
    localStorage.removeItem("token");
  },
};

/** ==============================
 *  üöÄ GROUPS API
 *  ============================== */
export const groupsApi = {
  async getGroups(): Promise<Group[]> {
    return apiFetch<Group[]>("/groups");
  },

  async updateGroup(groupId: string, name: string) {
    return apiFetch<{ id: string }>(`/groups/${groupId}`, {
      method: "PATCH",
      body: JSON.stringify({ name }),
    });
  },

  async getGroup(
    groupId: string
  ): Promise<Group & { members: { _id: string; name: string }[] }> {
    return apiFetch<Group & { members: { _id: string; name: string }[] }>(
      `/groups/${groupId}`
    );
  },

  async createGroup(name: string) {
    return apiFetch<{ id: string }>("/groups", {
      method: "POST",
      body: JSON.stringify({ name }),
    });
  },

  async joinGroup(groupId: string) {
    return apiFetch<{
       _id: string 
}>(`/groups/${groupId}/join`, {
      method: "POST",
    });
  },
  
  async deleteGroup(groupId: string) {
    return apiFetch(`/groups/${groupId}`, { method: "DELETE" });
  },

  async leaveGroup(groupId: string) {
    return apiFetch(`/groups/${groupId}/leave`, { method: "POST" });
  },

  async getGroupById(groupId: string) {
    return apiFetch<{ id: string; name: string; members: { _id: string; name: string }[] }>(
      `/groups/${groupId}`
    );
  },
};

/** ==============================
 *  üöÄ EXPENSES API
 *  ============================== */
export const expensesApi = {
  async getExpenses(groupId: string): Promise<Expense[]> {
    return apiFetch<Expense[]>(`/groups/${groupId}/expenses`);
  },

  async addExpense(
    groupId: string,
    name: string,
    amount: number,
    currency: "RUB" | "USD" | "EUR",
    paidBy: string,
    debtors: string[]
  ) {
    return apiFetch<{ id: string }>(`/groups/${groupId}/expenses`, {
      method: "POST",
      body: JSON.stringify({ name, amount, currency, paidBy, debtors }),
    });
  },

  async deleteExpense(groupId: string, expenseId: string) {
    return apiFetch(`/groups/${groupId}/expenses/${expenseId}`, {
      method: "DELETE",
    });
  },
};

/** ==============================
 *  üöÄ DEBTS API (–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤)
 *  ============================== */
export const debtsApi = {
  async getDebts(groupId: string) {
    return apiFetch<{ _id: string; from: { _id: string; name: string }; to: { _id: string; name: string }; amount: number, currency: string }[]>(
      `/groups/${groupId}/debts`
    );
  },
};


/** ==============================
 *  üöÄ SYNC API (–î–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞)
 *  ============================== */
export const syncApi = {
  async syncOfflineExpenses(expenses: Expense[]) {
    return apiFetch("/sync/expenses", {
      method: "POST",
      body: JSON.stringify({ expenses }),
    });
  },
};

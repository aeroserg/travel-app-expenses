"use client";

import { useState } from "react";
import { useMutation, useQuery } from "@tanstack/react-query";
import {
  Button,
  Input,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  useToast,
  Select,
  Checkbox,
  VStack,
  Text,
} from "@chakra-ui/react";
import { expensesApi, groupsApi } from "@/services/api";
import { useAuth } from "@/hooks/useAuth";
import { registerSync } from "@/hooks/useSync"; // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Background Sync
import { saveExpenseToCache } from "@/hooks/useCache"; // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –∫—ç—à

interface AddExpenseModalProps {
  isOpen: boolean;
  onClose: () => void;
  groupId: string;
}

export default function AddExpenseModal({ isOpen, onClose, groupId }: AddExpenseModalProps) {
  const { user } = useAuth();
  const [name, setName] = useState("");
  const [amount, setAmount] = useState("");
  const [currency, setCurrency] = useState<"RUB" | "USD" | "EUR">("RUB");
  const [debtors, setDebtors] = useState<string[]>([]);
  const toast = useToast();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
  const { data: group, isLoading: isLoadingGroup } = useQuery({
    queryKey: ["group", groupId],
    queryFn: () => groupsApi.getGroup(groupId),
    enabled: isOpen, // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –º–æ–¥–∞–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞
  });

  // –î–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º –¥–æ–ª–∂–Ω–∏–∫–æ–≤
  const toggleDebtor = (userId: string) => {
    setDebtors((prev) =>
      prev.includes(userId) ? prev.filter((id) => id !== userId) : [...prev, userId]
    );
  };

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const addExpenseMutation = useMutation({
    mutationFn: async () => {
      if (!user?._id) throw new Error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");

      const expenseData = {
        groupId,
        name,
        amount: parseFloat(amount),
        currency,
        paidBy: user._id,
        debtors,
      };

      if (navigator.onLine) {
        // ‚úÖ –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        return expensesApi.addExpense(groupId, name, parseFloat(amount), currency, user._id, debtors);
      } else {
        // üõë –ï—Å–ª–∏ –æ—Ñ—Ñ–ª–∞–π–Ω ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Cache Storage –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Background Sync
        await saveExpenseToCache(expenseData);
        await registerSync();
        throw new Error("–í—ã –æ—Ñ—Ñ–ª–∞–π–Ω. –¢—Ä–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.");
      }
    },
    onSuccess: () => {
      toast({
        title: "–¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        description: `–¢—Ä–∞—Ç–∞ "${name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.`,
        status: "success",
        duration: 3000,
        isClosable: true,
      });
      onClose();
      window.location.reload();
    },
    onError: (error) => {
      toast({
        title: "–û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º",
        description: error.message || "–¢—Ä–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.",
        status: "info",
        duration: 3000,
        isClosable: true,
      });
      onClose();
    },
  });

  return (
    <Modal isOpen={isOpen} onClose={onClose}>
      <ModalOverlay />
      <ModalContent>
        <ModalHeader>–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É</ModalHeader>
        <ModalCloseButton />
        <ModalBody>
          <Input placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" value={name} onChange={(e) => setName(e.target.value)} />
          <Input
            placeholder="–°—É–º–º–∞"
            type="number"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            mt={2}
          />
          <Select mt={2} value={currency} onChange={(e) => setCurrency(e.target.value as "RUB" | "USD" | "EUR")}>
            <option value="RUB">‚ÇΩ RUB</option>
            <option value="USD">$ USD</option>
            <option value="EUR">‚Ç¨ EUR</option>
          </Select>

          <Text mt={4} fontWeight="bold">
            {Number(amount) > 0 && `–¢—Ä–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ ${amount} ${currency} –¥–µ–ª–∏–º –º–µ–∂–¥—É:`}
          </Text>
          {isLoadingGroup ? (
            <Text>–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</Text>
          ) : (
            <VStack align="start" spacing={1}>
              {group?.members.map((member) => (
                <Checkbox
                  key={member._id}
                  isChecked={debtors.includes(member._id)}
                  onChange={() => toggleDebtor(member._id)}
                >
                  {member.name}
                </Checkbox>
              ))}
            </VStack>
          )}
        </ModalBody>
        <ModalFooter>
          <Button
            colorScheme="blue"
            onClick={() => addExpenseMutation.mutate()}
            isLoading={addExpenseMutation.isPending}
            isDisabled={!name || !amount || debtors.length === 0}
          >
            –î–æ–±–∞–≤–∏—Ç—å
          </Button>
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
}
